TI ARM Assembler Unix v5.2.5 Mon Jan 25 17:03:33 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    1

       1                    ; main.asm
       2                    ; Runs on LM4F120/TM4C123
       3                    ; Test the GPIO initialization functions by setting the LED
       4                    ; color according to the status of the switches.
       5                    ; The Reflex Test (no longer supported; each LED turns others off):
       6                    ; This program is functionally similar to SwitchTestMain.c
       7                    ; in Switch_4F120asm.  When switch #1 is pressed, the blue
       8                    ; LED comes on.  When switch #2 is pressed, the red LED
       9                    ; comes on.  When both switches are pressed, the green LED
      10                    ; comes on.  A short delay is inserted between
      11                    ; polls of the buttons to compensate for your reflexes and
      12                    ; the button bounce.  The following color combinations can
      13                    ; be made:
      14                    ; Color    LED(s) Illumination Method
      15                    ; dark     ---    release both buttons
      16                    ; red      R--    press right button (#2)
      17                    ; blue     --B    press left button (#1)
      18                    ; green    -G-    press both buttons exactly together
      19                    ; yellow   RG-    press right button, then press left button
      20                    ; sky blue -GB    press left button, then press right button
      21                    ; white    RGB    press either button, then press the other
      22                    ;                 button, then release the first button
      23                    ; pink     R-B    press either button, then release the
      24                    ;                 first button and immediately press the
      25                    ;                 other button
      26                    ; Daniel Valvano
      27                    ; May 3, 2015
      28                    
      29                    ;  This example accompanies the book
      30                    ;  "Embedded Systems: Introduction to ARM Cortex M Microcontrollers"
      31                    ;  ISBN: 978-1469998749, Jonathan Valvano, copyright (c) 2015
      32                    ;  Section 4.2    Program 4.1
      33                    ;
      34                    ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.utexas.edu
      35                    ;   You may use, edit, run or distribute this file
      36                    ;   as long as the above copyright notice remains
      37                    ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
      38                    ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
      39                    ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
      40                    ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
      41                    ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
      42                    ;For more information about my classes, my research, and my books, see
      43                    ;http://users.ece.utexas.edu/~valvano/
      44                    
      45                    ; negative logic switch #2 connected to PF0 on the Launchpad
      46                    ; red LED connected to PF1 on the Launchpad
      47                    ; blue LED connected to PF2 on the Launchpad
      48                    ; green LED connected to PF3 on the Launchpad
      49                    ; negative logic switch #1 connected to PF4 on the Launchpad
      50                    ; NOTE: The NMI (non-maskable interrupt) is on PF0.  That means that
      51                    ; the Alternate Function Select, Pull-Up Resistor, Pull-Down Resistor,
      52                    ; and Digital Enable are all locked for PF0 until a value of 0x4C4F434B
      53                    ; is written to the Port F GPIO Lock Register.  After Port F is
      54                    ; unlocked, bit 0 of the Port F GPIO Commit Register must be set to
      55                    ; allow access to PF0's control registers.  On the LM4F120, the other
TI ARM Assembler Unix v5.2.5 Mon Jan 25 17:03:33 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    2

      56                    ; bits of the Port F GPIO Commit Register are hard-wired to 1, meaning
      57                    ; that the rest of Port F can always be freely re-configured at any
      58                    ; time.  Requiring this procedure makes it unlikely to accidentally
      59                    ; re-configure the JTAG and NMI pins as GPIO, which can lock the
      60                    ; debugger out of the processor and make it permanently unable to be
      61                    ; debugged or re-programmed.
      62 00000000                  .thumb
      63 00000000                  .text
      64                           .align  2
      65 00000000 400253FC  GPIO_PORTF_DATA_R  .field 0x400253FC,32         ;pin 2:9 of GPIODATA
      66 00000004 40025400  GPIO_PORTF_DIR_R   .field 0x40025400,32
      67 00000008 40025420  GPIO_PORTF_AFSEL_R .field 0x40025420,32
      68 0000000c 40025510  GPIO_PORTF_PUR_R   .field 0x40025510,32
      69 00000010 4002551C  GPIO_PORTF_DEN_R   .field 0x4002551C,32
      70 00000014 40025520  GPIO_PORTF_LOCK_R  .field 0x40025520,32
      71 00000018 40025524  GPIO_PORTF_CR_R    .field 0x40025524,32
      72 0000001c 40025528  GPIO_PORTF_AMSEL_R .field 0x40025528,32
      73 00000020 4002552C  GPIO_PORTF_PCTL_R  .field 0x4002552C,32
      74 00000024 4C4F434B  GPIO_LOCK_KEY      .field 0x4C4F434B,32  ; Unlocks the GPIO_CR register
      75          00000002  RED       .equ 0x02
      76          00000004  BLUE      .equ 0x04
      77          00000008  GREEN     .equ 0x08
      78          00000010  SW1       .equ 0x10                 ; on the left side of the Launchpad board
      79          00000001  SW2       .equ 0x01                 ; on the right side of the Launchpad board
      80                    
      81                    ;-----------------------------------------
      82                    ;GPIO PORTA for switch
      83 00000028 400043FC  GPIO_PORTA_DATA_R  .field 0x400043FC,32         ;pin 2:9 of GPIODATA
      84 0000002c 40004400  GPIO_PORTA_DIR_R   .field 0x40004400,32
      85 00000030 40004420  GPIO_PORTA_AFSEL_R .field 0x40004420,32
      86 00000034 40004510  GPIO_PORTA_PUR_R   .field 0x40004510,32
      87 00000038 4000451C  GPIO_PORTA_DEN_R   .field 0x4000451C,32
      88 0000003c 40004520  GPIO_PORTA_LOCK_R  .field 0x40004520,32
      89 00000040 40004524  GPIO_PORTA_CR_R    .field 0x40004524,32
      90 00000044 40004528  GPIO_PORTA_AMSEL_R .field 0x40004528,32
      91 00000048 4000452C  GPIO_PORTA_PCTL_R  .field 0x4000452C,32
      92                    
      93                    ;---------------------------------------------
      94                    ;GPIO PORTB for LED
      95 0000004c 400053FC  GPIO_PORTB_DATA_R  .field 0x400053FC,32         ;pin 2:9 of GPIODATA
      96 00000050 40005400  GPIO_PORTB_DIR_R   .field 0x40005400,32
      97 00000054 40005420  GPIO_PORTB_AFSEL_R .field 0x40005420,32
      98 00000058 40005510  GPIO_PORTB_PUR_R   .field 0x40005510,32
      99 0000005c 4000551C  GPIO_PORTB_DEN_R   .field 0x4000551C,32
     100 00000060 40005520  GPIO_PORTB_LOCK_R  .field 0x40005520,32
     101 00000064 40005524  GPIO_PORTB_CR_R    .field 0x40005524,32
     102 00000068 40005528  GPIO_PORTB_AMSEL_R .field 0x40005528,32
     103 0000006c 4000552C  GPIO_PORTB_PCTL_R  .field 0x4000552C,32
     104                    
     105                    
     106 00000070 400FE608  SYSCTL_RCGCGPIO_R  .field 0x400FE608,32
     107                    
     108                          .global main
     109                    
     110                    main:  .asmfunc
TI ARM Assembler Unix v5.2.5 Mon Jan 25 17:03:33 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    3

     111 00000074 F819F000      BL  Ports_Init                  ; initialize input and output pins of Port F ; [KEEP 32-BIT INS]
     112 00000078           loop
     113 00000078 4809          LDR R0, FIFTHSEC                ; R0 = FIFTHSEC (delay 0.2 second) ; [ORIG 16-BIT INS]
     114 0000007a F813F000      BL  delay                       ; delay at least (3*R0) cycles ; [KEEP 32-BIT INS]
     115                    
     116 0000007e 0201F04F      MOV R2, #0x01 ; [KEEP 32-BIT INS]
     117 00000082 F894F000      BL  PortB_Output                 ; read all of the switches on Port F ; [KEEP 32-BIT INS]
     118 00000086 4806          LDR R0, FIFTHSEC                ; R0 = FIFTHSEC (delay 0.2 second) ; [ORIG 16-BIT INS]
     119 00000088 F80CF000      BL  delay ; [KEEP 32-BIT INS]
     120 0000008c 0200F04F      MOV R2, #0x00 ; [KEEP 32-BIT INS]
     121 00000090 F88DF000      BL  PortB_Output                 ; read all of the switches on Port F ; [KEEP 32-BIT INS]
     122 00000094 E7F0              B loop ; [ORIG 16-BIT INS]
     123                    
     124                        .endasmfunc
     125                    ;------------delay------------
     126                    ; Delay function for testing, which delays about 3*count cycles.
     127                    ; Input: R0  count
     128                    ; Output: none
     129 00000098 00516155  ONESEC             .field 5333333,32      ; approximately 1s delay at ~16 MHz clock
     130 0000009c 00145855  QUARTERSEC         .field 1333333,32      ; approximately 0.25s delay at ~16 MHz clock
     131 000000a0 001046AA  FIFTHSEC           .field 1066666,32      ; approximately 0.2s delay at ~16 MHz clock
     132                    delay:  .asmfunc
     133 000000a4 1E40          SUBS R0, R0, #1                 ; R0 = R0 - 1 (count = count - 1) ; [ORIG 16-BIT INS]
     134 000000a6 D1FD          BNE delay                       ; if count (R0) != 0, skip to 'delay' ; [ORIG 16-BIT INS]
     135 000000a8 4770          BX  LR                          ; return ; [ORIG 16-BIT INS]
     136                        .endasmfunc
     137                    
     138                    ;------------PortF_Init------------
     139                    ; Initialize GPIO Port F for negative logic switches on PF0 and
     140                    ; PF4 as the Launchpad is wired.  Weak internal pull-up
     141                    ; resistors are enabled, and the NMI functionality on PF0 is
     142                    ; disabled.  Make the RGB LED's pins outputs.
     143                    ; Input: none
     144                    ; Output: none
     145                    ; Modifies: R0, R1, R2
     146                    Ports_Init:  .asmfunc
     147 000000aa 103CF85F      LDR R1, SYSCTL_RCGCGPIO_R       ; 1) activate clock for Port F , A, B ; [KEEP 32-BIT INS]
     148 000000ae 6808          LDR R0, [R1] ; [ORIG 16-BIT INS]
     149 000000b0 0023F040      ORR R0, R0, #0x23;               ; set bit 5,1,0 to turn on clock ; [KEEP 32-BIT INS]
     150 000000b4 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     151 000000b6 BF00          NOP ; [ORIG 16-BIT INS]
     152 000000b8 BF00          NOP                             ; allow time for clock to finish ; [ORIG 16-BIT INS]
     153 000000ba 10A8F85F      LDR R1, GPIO_PORTF_LOCK_R       ; 2) unlock the lock register ; [KEEP 32-BIT INS]
     154 000000be 009CF85F      LDR R0, GPIO_LOCK_KEY             ; unlock GPIO Port F Commit Register ; [KEEP 32-BIT INS]
     155 000000c2 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     156                    
     157                    ; CR_R
     158 000000c4 10B0F85F      LDR R1, GPIO_PORTF_CR_R         ; enable commit for Port F ; [KEEP 32-BIT INS]
     159 000000c8 00FFF04F      MOV R0, #0xFF                   ; 1 means allow access ; [KEEP 32-BIT INS]
     160 000000cc 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     161 000000ce 1090F85F      LDR R1, GPIO_PORTA_CR_R         ; enable commit for Port F ; [KEEP 32-BIT INS]
     162 000000d2 00FFF04F      MOV R0, #0xFF                   ; 1 means allow access ; [KEEP 32-BIT INS]
     163 000000d6 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     164 000000d8 1078F85F      LDR R1, GPIO_PORTB_CR_R         ; enable commit for Port F ; [KEEP 32-BIT INS]
     165 000000dc 00FFF04F      MOV R0, #0xFF                   ; 1 means allow access ; [KEEP 32-BIT INS]
TI ARM Assembler Unix v5.2.5 Mon Jan 25 17:03:33 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    4

     166 000000e0 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     167                    
     168                    ; AMSEL
     169 000000e2 10C8F85F      LDR R1, GPIO_PORTF_AMSEL_R      ; 3) disable analog functionality ; [KEEP 32-BIT INS]
     170 000000e6 0000F04F      MOV R0, #0                      ; 0 means analog is off ; [KEEP 32-BIT INS]
     171 000000ea 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     172 000000ec 10ACF85F      LDR R1, GPIO_PORTA_AMSEL_R      ; 3) disable analog functionality ; [KEEP 32-BIT INS]
     173 000000f0 0000F04F      MOV R0, #0                      ; 0 means analog is off ; [KEEP 32-BIT INS]
     174 000000f4 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     175 000000f6 1090F85F      LDR R1, GPIO_PORTB_AMSEL_R      ; 3) disable analog functionality ; [KEEP 32-BIT INS]
     176 000000fa 0000F04F      MOV R0, #0                      ; 0 means analog is off ; [KEEP 32-BIT INS]
     177 000000fe 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     178                    
     179                    ;PCTL
     180 00000100 10E4F85F      LDR R1, GPIO_PORTF_PCTL_R       ; 4) configure as GPIO ; [KEEP 32-BIT INS]
     181 00000104 0000F04F      MOV R0, #0x00000000             ; 0 means configure Port F as GPIO ; [KEEP 32-BIT INS]
     182 00000108 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     183 0000010a 10C4F85F      LDR R1, GPIO_PORTA_PCTL_R       ; 4) configure as GPIO ; [KEEP 32-BIT INS]
     184 0000010e 0000F04F      MOV R0, #0x00000000             ; 0 means configure Port F as GPIO ; [KEEP 32-BIT INS]
     185 00000112 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     186 00000114 10ACF85F      LDR R1, GPIO_PORTB_PCTL_R       ; 4) configure as GPIO ; [KEEP 32-BIT INS]
     187 00000118 0000F04F      MOV R0, #0x00000000             ; 0 means configure Port F as GPIO ; [KEEP 32-BIT INS]
     188 0000011c 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     189                    
     190                    ; DIR
     191 0000011e 111CF85F      LDR R1, GPIO_PORTF_DIR_R        ; 5) set direction register of PORT F ; [KEEP 32-BIT INS]
     192 00000122 000EF04F      MOV R0,#0x0E                    ; PF0 and PF4 input, PF3-1 output ; [KEEP 32-BIT INS]
     193 00000126 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     194 00000128 1100F85F      LDR R1, GPIO_PORTA_DIR_R        ; 5) set direction register of PORT A ; [KEEP 32-BIT INS]
     195 0000012c 0000F04F      MOV R0,#0x00;                   ; PA2 to PA5 for 4 switches ; [KEEP 32-BIT INS]
     196 00000130 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     197 00000132 10E4F85F      LDR R1, GPIO_PORTB_DIR_R        ; 5) set direction register of PORT B ; [KEEP 32-BIT INS]
     198 00000136 00FFF04F      MOV R0,#0xFF                    ; PB0 to PB7 for 8 LEDs ; [KEEP 32-BIT INS]
     199 0000013a 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     200                    
     201                    ;AFSEL
     202 0000013c 1138F85F      LDR R1, GPIO_PORTF_AFSEL_R      ; 6) regular port function ; [KEEP 32-BIT INS]
     203 00000140 0000F04F      MOV R0, #0                      ; 0 means disable alternate function ; [KEEP 32-BIT INS]
     204 00000144 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     205 00000146 1118F85F      LDR R1, GPIO_PORTA_AFSEL_R      ; 6) regular port function ; [KEEP 32-BIT INS]
     206 0000014a 0000F04F      MOV R0, #0                      ; 0 means disable alternate function ; [KEEP 32-BIT INS]
     207 0000014e 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     208 00000150 1100F85F      LDR R1, GPIO_PORTB_AFSEL_R      ; 6) regular port function ; [KEEP 32-BIT INS]
     209 00000154 0000F04F      MOV R0, #0                      ; 0 means disable alternate function ; [KEEP 32-BIT INS]
     210 00000158 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     211                    
     212                    ; PUR
     213 0000015a 1150F85F      LDR R1, GPIO_PORTF_PUR_R        ; pull-up resistors for PF4,PF0 ; [KEEP 32-BIT INS]
     214 0000015e 0011F04F      MOV R0, #0x11                   ; enable weak pull-up on PF0 and PF4 ; [KEEP 32-BIT INS]
     215 00000162 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     216 00000164 1134F85F      LDR R1, GPIO_PORTA_PUR_R        ; pull-up resistors for PA2 to PA5 ; [KEEP 32-BIT INS]
     217 00000168 003CF04F      MOV R0, #0x3C                   ; enable weak pull-up on PA2 to PA5 ; [KEEP 32-BIT INS]
     218 0000016c 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     219                    
     220                    ;DEN
TI ARM Assembler Unix v5.2.5 Mon Jan 25 17:03:33 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    5

     221 0000016e 1160F85F      LDR R1, GPIO_PORTF_DEN_R        ; 7) enable Port F digital port ; [KEEP 32-BIT INS]
     222 00000172 00FFF04F      MOV R0, #0xFF                   ; 1 means enable digital I/O ; [KEEP 32-BIT INS]
     223 00000176 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     224 00000178 1120F85F      LDR R1, GPIO_PORTB_DEN_R        ; 7) enable Port B digital port ; [KEEP 32-BIT INS]
     225 0000017c 00FFF04F      MOV R0, #0xFF                   ; 1 means enable digital I/O ; [KEEP 32-BIT INS]
     226 00000180 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     227 00000182 114CF85F      LDR R1, GPIO_PORTA_DEN_R        ; 7) enable Port A digital port ; [KEEP 32-BIT INS]
     228 00000186 00FFF04F      MOV R0, #0xFF                   ; 1 means enable digital I/O ; [KEEP 32-BIT INS]
     229 0000018a 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     230                    
     231 0000018c 4770          BX  LR ; [ORIG 16-BIT INS]
     232                        .endasmfunc
     233                    
     234                    ;------------PortF_Input------------
     235                    ; Read and return the status of the switches.
     236                    ; Input: none
     237                    ; Output: R0  0x01 if only Switch 1 is pressed
     238                    ;         R0  0x10 if only Switch 2 is pressed
     239                    ;         R0  0x00 if both switches are pressed
     240                    ;         R0  0x11 if no switches are pressed
     241                    ; Modifies: R1
     242                    PortF_Input:  .asmfunc
     243 0000018e 1190F85F      LDR R1, GPIO_PORTF_DATA_R  ; pointer to Port F data ; [KEEP 32-BIT INS]
     244 00000192 6808          LDR R0, [R1]               ; read all of Port F ; [ORIG 16-BIT INS]
     245 00000194 0011F000      AND R0,R0,#0x11            ; just the input pins PF0 and PF4 ; [KEEP 32-BIT INS]
     246 00000198 4770          BX  LR                     ; return R0 with inputs ; [ORIG 16-BIT INS]
     247                        .endasmfunc
     248                    
     249                    ;------------PortF_Output------------
     250                    ; Set the output state of PF3-1.
     251                    ; Input: R0  new state of PF
     252                    ; Output: none
     253                    ; Modifies: R1
     254                    PortF_Output:  .asmfunc
     255 0000019a 119CF85F      LDR R1, GPIO_PORTF_DATA_R  ; pointer to Port F data ; [KEEP 32-BIT INS]
     256 0000019e 6008          STR R0, [R1]               ; write to PF3-1 ; [ORIG 16-BIT INS]
     257 000001a0 4770          BX  LR ; [ORIG 16-BIT INS]
     258                        .endasmfunc
     259                    
     260                    ;------------PortA_Input------------
     261                    ; Read and return the status of the switches.
     262                    ; Input: none
     263                    ; Output: R0  0x01 if only Switch 1 is pressed
     264                    ;         R0  0x10 if only Switch 2 is pressed
     265                    ;         R0  0x00 if both switches are pressed
     266                    ;         R0  0x11 if no switches are pressed
     267                    ; Modifies: R1
     268                    
     269                    PortA_Input:  .asmfunc
     270 000001a2 117CF85F      LDR R1, GPIO_PORTA_DATA_R  ; pointer to Port F data ; [KEEP 32-BIT INS]
     271 000001a6 6808          LDR R0, [R1]               ; read all of Port F ; [ORIG 16-BIT INS]
     272 000001a8 003CF000      AND R0,R0,#0x3C            ; just the input pins PA2 to PA5 ; [KEEP 32-BIT INS]
     273 000001ac 4770          BX  LR                     ; return R0 with inputs ; [ORIG 16-BIT INS]
     274                        .endasmfunc
     275                    
TI ARM Assembler Unix v5.2.5 Mon Jan 25 17:03:33 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    6

     276                    ;------------PortB_Output------------
     277                    ; Set the output state of PB0-8.
     278                    ; Input: R0  new state of PF
     279                    ; Output: none
     280                    ; Modifies: R1
     281                    PortB_Output:  .asmfunc
     282 000001ae 1164F85F      LDR R1, GPIO_PORTB_DATA_R  ; pointer to Port F data ; [KEEP 32-BIT INS]
     283 000001b2 600A          STR R2, [R1]               ; write to PF3-1 ; [ORIG 16-BIT INS]
     284 000001b4 4770          BX  LR ; [ORIG 16-BIT INS]
     285                        .endasmfunc
     286                    
     287                        .end                             ; end of file

--------------------------
Thumb2 Statistics
--------------------------
Number of Thumb2 ins converted to Thumb = 0 (0%)
Number of Thumb ins in input = 40 (41%)
Number of Thumb2 ins encoded as Thumb2 = 57 (100%)
Number of Thumb2 ins converted to 2 OPND Thumb = 30


No Assembly Errors, No Assembly Warnings
