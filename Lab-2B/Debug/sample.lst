TI ARM Assembler Unix v5.2.5 Mon Feb  1 17:13:02 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    1

       1                    ; main.asm
       2                    ; Runs on LM4F120/TM4C123
       3                    ; Test the GPIO initialization functions by setting the LED
       4                    ; color according to the status of the switches.
       5                    ; The Reflex Test (no longer supported; each LED turns others off):
       6                    ; This program is functionally similar to SwitchTestMain.c
       7                    ; in Switch_4F120asm.  When switch #1 is pressed, the blue
       8                    ; LED comes on.  When switch #2 is pressed, the red LED
       9                    ; comes on.  When both switches are pressed, the green LED
      10                    ; comes on.  A short delay is inserted between
      11                    ; polls of the buttons to compensate for your reflexes and
      12                    ; the button bounce.  The following color combinations can
      13                    ; be made:
      14                    ; Color    LED(s) Illumination Method
      15                    ; dark     ---    release both buttons
      16                    ; red      R--    press right button (#2)
      17                    ; blue     --B    press left button (#1)
      18                    ; green    -G-    press both buttons exactly together
      19                    ; yellow   RG-    press right button, then press left button
      20                    ; sky blue -GB    press left button, then press right button
      21                    ; white    RGB    press either button, then press the other
      22                    ;                 button, then release the first button
      23                    ; pink     R-B    press either button, then release the
      24                    ;                 first button and immediately press the
      25                    ;                 other button
      26                    ; Daniel Valvano
      27                    ; May 3, 2015
      28                    
      29                    ;  This example accompanies the book
      30                    ;  "Embedded Systems: Introduction to ARM Cortex M Microcontrollers"
      31                    ;  ISBN: 978-1469998749, Jonathan Valvano, copyright (c) 2015
      32                    ;  Section 4.2    Program 4.1
      33                    ;
      34                    ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.utexas.edu
      35                    ;   You may use, edit, run or distribute this file
      36                    ;   as long as the above copyright notice remains
      37                    ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
      38                    ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
      39                    ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
      40                    ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
      41                    ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
      42                    ;For more information about my classes, my research, and my books, see
      43                    ;http://users.ece.utexas.edu/~valvano/
      44                    
      45                    ; negative logic switch #2 connected to PF0 on the Launchpad
      46                    ; red LED connected to PF1 on the Launchpad
      47                    ; blue LED connected to PF2 on the Launchpad
      48                    ; green LED connected to PF3 on the Launchpad
      49                    ; negative logic switch #1 connected to PF4 on the Launchpad
      50                    ; NOTE: The NMI (non-maskable interrupt) is on PF0.  That means that
      51                    ; the Alternate Function Select, Pull-Up Resistor, Pull-Down Resistor,
      52                    ; and Digital Enable are all locked for PF0 until a value of 0x4C4F434B
      53                    ; is written to the Port F GPIO Lock Register.  After Port F is
      54                    ; unlocked, bit 0 of the Port F GPIO Commit Register must be set to
      55                    ; allow access to PF0's control registers.  On the LM4F120, the other
TI ARM Assembler Unix v5.2.5 Mon Feb  1 17:13:02 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    2

      56                    ; bits of the Port F GPIO Commit Register are hard-wired to 1, meaning
      57                    ; that the rest of Port F can always be freely re-configured at any
      58                    ; time.  Requiring this procedure makes it unlikely to accidentally
      59                    ; re-configure the JTAG and NMI pins as GPIO, which can lock the
      60                    ; debugger out of the processor and make it permanently unable to be
      61                    ; debugged or re-programmed.
      62 00000000                  .thumb
      63 00000000                  .text
      64                           .align  2
      65 00000000 400253FC  GPIO_PORTF_DATA_R  .field 0x400253FC,32         ;pin 2:9 of GPIODATA
      66 00000004 40025400  GPIO_PORTF_DIR_R   .field 0x40025400,32
      67 00000008 40025420  GPIO_PORTF_AFSEL_R .field 0x40025420,32
      68 0000000c 40025510  GPIO_PORTF_PUR_R   .field 0x40025510,32
      69 00000010 4002551C  GPIO_PORTF_DEN_R   .field 0x4002551C,32
      70 00000014 40025520  GPIO_PORTF_LOCK_R  .field 0x40025520,32
      71 00000018 40025524  GPIO_PORTF_CR_R    .field 0x40025524,32
      72 0000001c 40025528  GPIO_PORTF_AMSEL_R .field 0x40025528,32
      73 00000020 4002552C  GPIO_PORTF_PCTL_R  .field 0x4002552C,32
      74 00000024 4C4F434B  GPIO_LOCK_KEY      .field 0x4C4F434B,32  ; Unlocks the GPIO_CR register
      75          00000002  RED       .equ 0x02
      76          00000004  BLUE      .equ 0x04
      77          00000008  GREEN     .equ 0x08
      78          00000010  SW1       .equ 0x10                 ; on the left side of the Launchpad board
      79          00000001  SW2       .equ 0x01                 ; on the right side of the Launchpad board
      80                    
      81                    ;-----------------------------------------
      82                    ;GPIO PORTA for switch
      83 00000028 400043FC  GPIO_PORTA_DATA_R  .field 0x400043FC,32         ;pin 2:9 of GPIODATA
      84 0000002c 40004400  GPIO_PORTA_DIR_R   .field 0x40004400,32
      85 00000030 40004420  GPIO_PORTA_AFSEL_R .field 0x40004420,32
      86 00000034 40004510  GPIO_PORTA_PUR_R   .field 0x40004510,32
      87 00000038 4000451C  GPIO_PORTA_DEN_R   .field 0x4000451C,32
      88 0000003c 40004520  GPIO_PORTA_LOCK_R  .field 0x40004520,32
      89 00000040 40004524  GPIO_PORTA_CR_R    .field 0x40004524,32
      90 00000044 40004528  GPIO_PORTA_AMSEL_R .field 0x40004528,32
      91 00000048 4000452C  GPIO_PORTA_PCTL_R  .field 0x4000452C,32
      92                    
      93                    ;---------------------------------------------
      94                    ;GPIO PORTB for LED
      95 0000004c 400053FC  GPIO_PORTB_DATA_R  .field 0x400053FC,32         ;pin 2:9 of GPIODATA
      96 00000050 40005400  GPIO_PORTB_DIR_R   .field 0x40005400,32
      97 00000054 40005420  GPIO_PORTB_AFSEL_R .field 0x40005420,32
      98 00000058 40005510  GPIO_PORTB_PUR_R   .field 0x40005510,32
      99 0000005c 4000551C  GPIO_PORTB_DEN_R   .field 0x4000551C,32
     100 00000060 40005520  GPIO_PORTB_LOCK_R  .field 0x40005520,32
     101 00000064 40005524  GPIO_PORTB_CR_R    .field 0x40005524,32
     102 00000068 40005528  GPIO_PORTB_AMSEL_R .field 0x40005528,32
     103 0000006c 4000552C  GPIO_PORTB_PCTL_R  .field 0x4000552C,32
     104                    
     105                    
     106 00000070 400FE608  SYSCTL_RCGCGPIO_R  .field 0x400FE608,32
     107                    
     108                          .global main
     109                    
     110                    main:  .asmfunc
TI ARM Assembler Unix v5.2.5 Mon Feb  1 17:13:02 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    3

     111 00000074 F857F000      BL  Ports_Init                  ; initialize input and output pins of Port F ; [KEEP 32-BIT INS]
     112 00000078 0300F04F      MOV R3, #0x00 ; [KEEP 32-BIT INS]
     113 0000007c 0400F04F          MOV R4, #0x00 ; [KEEP 32-BIT INS]
     114 00000080           loop
     115 00000080 4824          LDR R0, ONESEC                ; R0 = FIFTHSEC (delay 0.2 second) ; [ORIG 16-BIT INS]
     116 00000082 F84DF000      BL  delay                       ; delay at least (3*R0) cycles ; [KEEP 32-BIT INS]
     117                        ;MOV R2, #0x01
     118                        ;BL  PortB_Output                ; turn LED-1 on
     119                        ;LDR R0, FIFTHSEC                ; R0 = FIFTHSEC (delay 0.2 second)
     120                        ;BL  delay
     121                        ;MOV R2, #0x00
     122                        ;BL  PortB_Output                ; read all of the switches on Port F
     123                            ;B loop
     124                    
     125                    ; step-1
     126 00000086 0208F04F          MOV R2, #0x08;                                  ; green on ; [KEEP 32-BIT INS]
     127 0000008a F8C4F000          BL PortF_Output ; [KEEP 32-BIT INS]
     128                    
     129 0000008e 4821              LDR R0, ONESEC                ; R0 = ONESEC (delay 1 second) ; [ORIG 16-BIT INS]
     130 00000090 F846F000      BL  delay ; [KEEP 32-BIT INS]
     131                    
     132 00000094           swread
     133 00000094 0208F04F          MOV R2, #0x08;                                  ; green on ; [KEEP 32-BIT INS]
     134 00000098 F8BDF000          BL PortF_Output ; [KEEP 32-BIT INS]
     135                    
     136 0000009c F8B5F000          BL PortF_Input                          ;        sw2 status ; [KEEP 32-BIT INS]
     137 000000a0 2A01              CMP R2, #0x01 ; [ORIG 16-BIT INS]
     138 000000a2 D0F7              BEQ swread ; [ORIG 16-BIT INS]
     139                    
     140                    ; if switch pressed, following instruction will execute
     141 000000a4 0200F04F          MOV R2, #0x00;                                  ; green off ; [KEEP 32-BIT INS]
     142 000000a8 F8B5F000          BL PortF_Output ; [KEEP 32-BIT INS]
     143 000000ac 4819              LDR R0, ONESEC                ; R0 = ONESEC (delay 1 second) ; [ORIG 16-BIT INS]
     144 000000ae F837F000      BL  delay ; [KEEP 32-BIT INS]
     145                    
     146 000000b2 F8B4F000          BL PortA_Input                          ; read switch status of PORT A ; [KEEP 32-BIT INS]
     147                    ;
     148 000000b6 0292EA4F          LSR R2,#2 ; [KEEP 32-BIT INS]
     149 000000ba 4313              ORRS R3,R3,R2 ; [ORIG 16-BIT INS]
     150 000000bc 1303EA4F          LSL R3, #4 ; [KEEP 32-BIT INS]
     151                    
     152 000000c0 0401F104          ADD R4,#1 ; [KEEP 32-BIT INS]
     153 000000c4 2C04              CMP R4,#0x04                    ; read status of switch 4 times ; [ORIG 16-BIT INS]
     154 000000c6 D1E5              BNE swread ; [ORIG 16-BIT INS]
     155 000000c8 1313EA4F          LSR R3,#4                               ; ; [KEEP 32-BIT INS]
     156 000000cc BF00              NOP ; [ORIG 16-BIT INS]
     157                    
     158 000000ce 0400F04F          MOV R4,#0x00 ; [KEEP 32-BIT INS]
     159 000000d2 4440F403          AND R4,R3,#0xC000               ; store operand ; [KEEP 32-BIT INS]
     160                    
     161 000000d6 3494EA4F          LSR R4,#14 ; [KEEP 32-BIT INS]
     162                    
     163 000000da 2C00              CMP R4,#0x00 ; [ORIG 16-BIT INS]
     164 000000dc D005              BEQ copy ; [ORIG 16-BIT INS]
     165                    
TI ARM Assembler Unix v5.2.5 Mon Feb  1 17:13:02 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    4

     166 000000de 2C01              CMP R4,#0x01 ; [ORIG 16-BIT INS]
     167 000000e0 D014              BEQ addition ; [ORIG 16-BIT INS]
     168                    
     169 000000e2 2C10              CMP R4,#0x10 ; [ORIG 16-BIT INS]
     170 000000e4 D013              BEQ subtraction ; [ORIG 16-BIT INS]
     171                    
     172 000000e6 2C01              CMP R4,#0x01 ; [ORIG 16-BIT INS]
     173 000000e8 D012              BEQ multiply ; [ORIG 16-BIT INS]
     174                    
     175 000000ea           copy
     176                    
     177 000000ea 461A              MOV R2,R3 ; [ORIG 16-BIT INS]
     178 000000ec F89DF000          BL PortB_Output ; [KEEP 32-BIT INS]
     179                    
     180 000000f0 4808              LDR R0, ONESEC                ; R0 = ONESEC (delay 1 second) ; [ORIG 16-BIT INS]
     181 000000f2 F815F000      BL  delay ; [KEEP 32-BIT INS]
     182 000000f6 F813F000      BL delay ; [KEEP 32-BIT INS]
     183                    
     184 000000fa 2212EA4F      LSR R2,#0x08 ; [KEEP 32-BIT INS]
     185 000000fe F894F000          BL PortB_Output ; [KEEP 32-BIT INS]
     186                    
     187 00000102 4804              LDR R0, ONESEC                ; R0 = ONESEC (delay 1 second) ; [ORIG 16-BIT INS]
     188 00000104 F80CF000      BL  delay ; [KEEP 32-BIT INS]
     189 00000108 F80AF000      BL delay ; [KEEP 32-BIT INS]
     190                    
     191 0000010c           addition
     192 0000010c BF00              NOP ; [ORIG 16-BIT INS]
     193 0000010e           subtraction
     194 0000010e BF00              NOP ; [ORIG 16-BIT INS]
     195 00000110           multiply
     196 00000110 BF00              NOP ; [ORIG 16-BIT INS]
     197                    
     198 00000112 E7EA              B copy ; [ORIG 16-BIT INS]
     199                    
     200                    
     201                    ;
     202                    
     203                        .endasmfunc
     204                    ;------------delay------------
     205                    ; Delay function for testing, which delays about 3*count cycles.
     206                    ; Input: R0  count
     207                    ; Output: none
     208 00000114 00516155  ONESEC             .field 5333333,32      ; approximately 1s delay at ~16 MHz clock
     209 00000118 00145855  QUARTERSEC         .field 1333333,32      ; approximately 0.25s delay at ~16 MHz clock
     210 0000011c 001046AA  FIFTHSEC           .field 1066666,32      ; approximately 0.2s delay at ~16 MHz clock
     211                    delay:  .asmfunc
     212 00000120 1E40          SUBS R0, R0, #1                 ; R0 = R0 - 1 (count = count - 1) ; [ORIG 16-BIT INS]
     213 00000122 D1FD          BNE delay                       ; if count (R0) != 0, skip to 'delay' ; [ORIG 16-BIT INS]
     214 00000124 4770          BX  LR                          ; return ; [ORIG 16-BIT INS]
     215                        .endasmfunc
     216                    
     217                    ;------------PortF_Init------------
     218                    ; Initialize GPIO Port F for negative logic switches on PF0 and
     219                    ; PF4 as the Launchpad is wired.  Weak internal pull-up
     220                    ; resistors are enabled, and the NMI functionality on PF0 is
TI ARM Assembler Unix v5.2.5 Mon Feb  1 17:13:02 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    5

     221                    ; disabled.  Make the RGB LED's pins outputs.
     222                    ; Input: none
     223                    ; Output: none
     224                    ; Modifies: R0, R1, R2
     225                    Ports_Init:  .asmfunc
     226 00000126 10B8F85F      LDR R1, SYSCTL_RCGCGPIO_R       ; 1) activate clock for Port F , A, B ; [KEEP 32-BIT INS]
     227 0000012a 6808          LDR R0, [R1] ; [ORIG 16-BIT INS]
     228 0000012c 0023F040      ORR R0, R0, #0x23;               ; set bit 5,1,0 to turn on clock ; [KEEP 32-BIT INS]
     229 00000130 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     230 00000132 BF00          NOP ; [ORIG 16-BIT INS]
     231 00000134 BF00          NOP                             ; allow time for clock to finish ; [ORIG 16-BIT INS]
     232 00000136 1124F85F      LDR R1, GPIO_PORTF_LOCK_R       ; 2) unlock the lock register ; [KEEP 32-BIT INS]
     233 0000013a 0118F85F      LDR R0, GPIO_LOCK_KEY             ; unlock GPIO Port F Commit Register ; [KEEP 32-BIT INS]
     234 0000013e 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     235                    
     236                    ; CR_R
     237 00000140 112CF85F      LDR R1, GPIO_PORTF_CR_R         ; enable commit for Port F ; [KEEP 32-BIT INS]
     238 00000144 00FFF04F      MOV R0, #0xFF                   ; 1 means allow access ; [KEEP 32-BIT INS]
     239 00000148 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     240 0000014a 110CF85F      LDR R1, GPIO_PORTA_CR_R         ; enable commit for Port F ; [KEEP 32-BIT INS]
     241 0000014e 00FFF04F      MOV R0, #0xFF                   ; 1 means allow access ; [KEEP 32-BIT INS]
     242 00000152 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     243 00000154 10F4F85F      LDR R1, GPIO_PORTB_CR_R         ; enable commit for Port F ; [KEEP 32-BIT INS]
     244 00000158 00FFF04F      MOV R0, #0xFF                   ; 1 means allow access ; [KEEP 32-BIT INS]
     245 0000015c 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     246                    
     247                    ; AMSEL
     248 0000015e 1144F85F      LDR R1, GPIO_PORTF_AMSEL_R      ; 3) disable analog functionality ; [KEEP 32-BIT INS]
     249 00000162 0000F04F      MOV R0, #0                      ; 0 means analog is off ; [KEEP 32-BIT INS]
     250 00000166 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     251 00000168 1128F85F      LDR R1, GPIO_PORTA_AMSEL_R      ; 3) disable analog functionality ; [KEEP 32-BIT INS]
     252 0000016c 0000F04F      MOV R0, #0                      ; 0 means analog is off ; [KEEP 32-BIT INS]
     253 00000170 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     254 00000172 110CF85F      LDR R1, GPIO_PORTB_AMSEL_R      ; 3) disable analog functionality ; [KEEP 32-BIT INS]
     255 00000176 0000F04F      MOV R0, #0                      ; 0 means analog is off ; [KEEP 32-BIT INS]
     256 0000017a 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     257                    
     258                    ;PCTL
     259 0000017c 1160F85F      LDR R1, GPIO_PORTF_PCTL_R       ; 4) configure as GPIO ; [KEEP 32-BIT INS]
     260 00000180 0000F04F      MOV R0, #0x00000000             ; 0 means configure Port F as GPIO ; [KEEP 32-BIT INS]
     261 00000184 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     262 00000186 1140F85F      LDR R1, GPIO_PORTA_PCTL_R       ; 4) configure as GPIO ; [KEEP 32-BIT INS]
     263 0000018a 0000F04F      MOV R0, #0x00000000             ; 0 means configure Port F as GPIO ; [KEEP 32-BIT INS]
     264 0000018e 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     265 00000190 1128F85F      LDR R1, GPIO_PORTB_PCTL_R       ; 4) configure as GPIO ; [KEEP 32-BIT INS]
     266 00000194 0000F04F      MOV R0, #0x00000000             ; 0 means configure Port F as GPIO ; [KEEP 32-BIT INS]
     267 00000198 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     268                    
     269                    ; DIR
     270 0000019a 1198F85F      LDR R1, GPIO_PORTF_DIR_R        ; 5) set direction register of PORT F ; [KEEP 32-BIT INS]
     271 0000019e 000EF04F      MOV R0,#0x0E                    ; PF0 and PF4 input, PF3-1 output ; [KEEP 32-BIT INS]
     272 000001a2 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     273 000001a4 117CF85F      LDR R1, GPIO_PORTA_DIR_R        ; 5) set direction register of PORT A ; [KEEP 32-BIT INS]
     274 000001a8 0000F04F      MOV R0,#0x00;                   ; PA2 to PA5 for 4 switches ; [KEEP 32-BIT INS]
     275 000001ac 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
TI ARM Assembler Unix v5.2.5 Mon Feb  1 17:13:02 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    6

     276 000001ae 1160F85F      LDR R1, GPIO_PORTB_DIR_R        ; 5) set direction register of PORT B ; [KEEP 32-BIT INS]
     277 000001b2 00FFF04F      MOV R0,#0xFF                    ; PB0 to PB7 for 8 LEDs ; [KEEP 32-BIT INS]
     278 000001b6 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     279                    
     280                    ;AFSEL
     281 000001b8 11B4F85F      LDR R1, GPIO_PORTF_AFSEL_R      ; 6) regular port function ; [KEEP 32-BIT INS]
     282 000001bc 0000F04F      MOV R0, #0                      ; 0 means disable alternate function ; [KEEP 32-BIT INS]
     283 000001c0 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     284 000001c2 1194F85F      LDR R1, GPIO_PORTA_AFSEL_R      ; 6) regular port function ; [KEEP 32-BIT INS]
     285 000001c6 0000F04F      MOV R0, #0                      ; 0 means disable alternate function ; [KEEP 32-BIT INS]
     286 000001ca 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     287 000001cc 117CF85F      LDR R1, GPIO_PORTB_AFSEL_R      ; 6) regular port function ; [KEEP 32-BIT INS]
     288 000001d0 0000F04F      MOV R0, #0                      ; 0 means disable alternate function ; [KEEP 32-BIT INS]
     289 000001d4 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     290                    
     291                    ;PUR
     292 000001d6 11CCF85F      LDR R1, GPIO_PORTF_PUR_R        ; pull-up resistors for PF4,PF0 ; [KEEP 32-BIT INS]
     293 000001da 0011F04F      MOV R0, #0x11                   ; enable weak pull-up on PF0 and PF4 ; [KEEP 32-BIT INS]
     294 000001de 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     295 000001e0 11B0F85F      LDR R1, GPIO_PORTA_PUR_R        ; pull-up resistors for PA2 to PA5 ; [KEEP 32-BIT INS]
     296 000001e4 003CF04F      MOV R0, #0x3C                   ; enable weak pull-up on PA2 to PA5 ; [KEEP 32-BIT INS]
     297 000001e8 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     298                    
     299                    ;DEN
     300 000001ea 11DCF85F      LDR R1, GPIO_PORTF_DEN_R        ; 7) enable Port F digital port ; [KEEP 32-BIT INS]
     301 000001ee 00FFF04F      MOV R0, #0xFF                   ; 1 means enable digital I/O ; [KEEP 32-BIT INS]
     302 000001f2 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     303 000001f4 119CF85F      LDR R1, GPIO_PORTB_DEN_R        ; 7) enable Port B digital port ; [KEEP 32-BIT INS]
     304 000001f8 00FFF04F      MOV R0, #0xFF                   ; 1 means enable digital I/O ; [KEEP 32-BIT INS]
     305 000001fc 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     306 000001fe 11C8F85F      LDR R1, GPIO_PORTA_DEN_R        ; 7) enable Port A digital port ; [KEEP 32-BIT INS]
     307 00000202 00FFF04F      MOV R0, #0xFF                   ; 1 means enable digital I/O ; [KEEP 32-BIT INS]
     308 00000206 6008          STR R0, [R1] ; [ORIG 16-BIT INS]
     309                    
     310 00000208 4770          BX  LR ; [ORIG 16-BIT INS]
     311                        .endasmfunc
     312                    
     313                    ;------------PortF_Input------------
     314                    ; Read and return the status of the switches.
     315                    ; Input: none
     316                    ; Output: R0  0x01 if only Switch 1 is pressed
     317                    ;         R0  0x10 if only Switch 2 is pressed
     318                    ;         R0  0x00 if both switches are pressed
     319                    ;         R0  0x11 if no switches are pressed
     320                    ; Modifies: R1
     321                    PortF_Input:  .asmfunc
     322 0000020a 120CF85F      LDR R1, GPIO_PORTF_DATA_R  ; pointer to Port F data ; [KEEP 32-BIT INS]
     323 0000020e 680A          LDR R2, [R1]               ; read all of Port F ; [ORIG 16-BIT INS]
     324 00000210 0201F002      AND R2,R2,#0x01            ; just the input pins PF0 and PF4 ; [KEEP 32-BIT INS]
     325 00000214 4770          BX  LR                     ; return R0 with inputs ; [ORIG 16-BIT INS]
     326                        .endasmfunc
     327                    
     328                    ;------------PortF_Output------------
     329                    ; Set the output state of PF3-1.
     330                    ; Input: R0  new state of PF
TI ARM Assembler Unix v5.2.5 Mon Feb  1 17:13:02 2016

Tools Copyright (c) 1996-2015 Texas Instruments Incorporated
../sample.asm                                                        PAGE    7

     331                    ; Output: none
     332                    ; Modifies: R1
     333                    PortF_Output:  .asmfunc
     334 00000216 1218F85F      LDR R1, GPIO_PORTF_DATA_R  ; pointer to Port F data ; [KEEP 32-BIT INS]
     335 0000021a 600A          STR R2, [R1]               ; write to PF3-1 ; [ORIG 16-BIT INS]
     336 0000021c 4770          BX  LR ; [ORIG 16-BIT INS]
     337                        .endasmfunc
     338                    
     339                    ;------------PortA_Input------------
     340                    ; Read and return the status of the switches.
     341                    ; Input: none
     342                    ; Output: R0  0x01 if only Switch 1 is pressed
     343                    ;         R0  0x10 if only Switch 2 is pressed
     344                    ;         R0  0x00 if both switches are pressed
     345                    ;         R0  0x11 if no switches are pressed
     346                    ; Modifies: R1
     347                    
     348                    PortA_Input:  .asmfunc
     349 0000021e 11F8F85F      LDR R1, GPIO_PORTA_DATA_R  ; pointer to Port F data ; [KEEP 32-BIT INS]
     350 00000222 680A          LDR R2, [R1]               ; read all of Port F ; [ORIG 16-BIT INS]
     351 00000224 023CF002      AND R2,R2,#0x3C            ; just the input pins PA2 to PA5 ; [KEEP 32-BIT INS]
     352 00000228 4770          BX  LR                     ; return R0 with inputs ; [ORIG 16-BIT INS]
     353                        .endasmfunc
     354                    
     355                    ;------------PortB_Output------------
     356                    ; Set the output state of PB0-8.
     357                    ; Input: R0  new state of PF
     358                    ; Output: none
     359                    ; Modifies: R1
     360                    PortB_Output:  .asmfunc
     361 0000022a 11E0F85F      LDR R1, GPIO_PORTB_DATA_R  ; pointer to Port F data ; [KEEP 32-BIT INS]
     362 0000022e 600A          STR R2, [R1]               ; write to PF3-1 ; [ORIG 16-BIT INS]
     363 00000230 4770          BX  LR ; [ORIG 16-BIT INS]
     364                        .endasmfunc
     365                    
     366                        .end                             ; end of file

--------------------------
Thumb2 Statistics
--------------------------
Number of Thumb2 ins converted to Thumb = 0 (0%)
Number of Thumb ins in input = 62 (44%)
Number of Thumb2 ins encoded as Thumb2 = 78 (100%)
Number of Thumb2 ins converted to 2 OPND Thumb = 42


No Assembly Errors, No Assembly Warnings
